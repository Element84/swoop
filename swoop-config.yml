handlers:
  argoHandler:
    type: argoWorkflow

  cirrusHandler:
    type: cirrusWorkflow

  publishS3Handler:
    type: http
    url: https://{secrets.minio-user}:{secrets.minio-password}@our-minio:9000
    requestBody: |
      {
        "fixed": "a_value",
        "name": "{{ .parameters.workflowName -}}",
        "date": "{{ .parameters.feature.properties.datetime -}}"
      }
    operation: POST
    secrets:
      - name: user
        type: file
        path: /secrets-mount/username-secret
        ttl: 1200
    headers:
      Authorization: "Basic {{ .secrets.user }} {{ .secrets.password}}"
      Content-Type: "application/json"
      X-Workflow-Name: "{{ .parameters.workflowName }}"
    backoff:
      retries: 10
      seconds: 5
      factor: 2
      max: 25
    errors:
      - status: 400
        retryable: false
      - status: 400
        message: ".*timed out.*"
        retryable: true
    parameters:
      workflowName:
        type: string
        default: a_value
      feature:
        type: object

conductors:
  instance-a:
    handlers:
      - argoHandler
      - publishS3Handler

callbacks:
  publishS3Push: &callbacksPublishS3Push
    handler: publishS3Handler
    type: perFeature
    when:
      - "successful"
    featureFilter: "@.id =~ 'fake*' & @.properties.gsd <= 0"
    parameters:
      workflowName:
        path: .input.features[0].id
      feature:
        value: { "feature": true }
    enabled: true

workflows:
  mirror:
    description: "A workflow to copy STAC items into a local mirror"
    version: 2
    handler: argoHandler
    argoTemplate: workflowtemplate/mirror-workflow
    cacheKeyHashIncludes:
      - .features[].id
      - .features[].collection
    cacheKeyHashExcludes: []
    callbacks:
      publishS3Push:
        <<: *callbacksPublishS3Push
    inputSchema:
      type: object
      properties:
        features:
          items:
            $ref: "#/$defs/feature"
          minItems: 1
          maxItems: 1
          type: array
          uniqueItems: true
        id:
          type: string
        process:
          $ref: "#/$defs/workflows"
        type:
          type: string
          pattern: "^FeatureCollection$"
      required:
        - type
        - features
        - process
      $defs:
        feature:
          type: object
          properties:
            id:
              type: string
            collection:
              type:
                - string
                - "null"
          required:
            - id
            - collection
        tasks:
          type: object
        upload_options:
          properties:
            collections:
              additionalProperties:
                type: string
              minProperties: 1
              type: object
            path_template:
              type: string
          type: object
        workflow:
          properties:
            description:
              type: string
            replace:
              type: boolean
            tasks:
              $ref: "#/$defs/tasks"
            upload_options:
              $ref: "#/$defs/upload_options"
            workflow:
              type: string
              pattern: "^mirror$"
          required:
            - workflow
            - upload_options
          type: object
        workflows:
          prefixItems:
            - $ref: "#/$defs/workflow"
          additionalItems:
            type:
              - $ref: "#/$defs/workflow"
              - items:
                  $ref: "#/$defs/workflow"
                type: array
                uniqueItems: true
                minItems: 1
          minItems: 1
          type: array
          uniqueItems: true
    outputSchema:
      type: object
      properties:
        features:
          items:
            $ref: "#/$defs/feature"
          minItems: 1
          maxItems: 1
          type: array
          uniqueItems: true
        id:
          type: string
        process:
          $ref: "#/$defs/workflows"
        type:
          type: string
          pattern: "^FeatureCollection$"
      required:
        - type
        - features
        - process
      $defs:
        feature:
          type: object
        tasks:
          type: object
        upload_options:
          properties:
            collections:
              additionalProperties:
                type: string
              type: object
            path_template:
              type: string
          type: object
        workflow:
          properties:
            description:
              type: string
            replace:
              type: boolean
            tasks:
              $ref: "#/$defs/tasks"
            upload_options:
              $ref: "#/$defs/upload_options"
            workflow:
              type: string
              pattern: "^mirror$"
          required:
            - workflow
            - upload_options
          type: object
        workflows:
          prefixItems:
            - $ref: "#/$defs/workflow"
          additionalItems:
            type:
              - $ref: "#/$defs/workflow"
              - items:
                  $ref: "#/$defs/workflow"
                type: array
                uniqueItems: true
                minItems: 1
          minItems: 1
          type: array
          uniqueItems: true
  cirrus-example:
    callbacks:
      publishS3Push:
        <<: *callbacksPublishS3Push
        when:
          - "!failed"
          - "successful"
    title: "Cirrus example workflow"
    description: "An example workflow config for a cirrus workflow"
    version: 1
    handler: cirrusHandler
    sfnArn: arn:aws:states:us-west-2:09876543210:stateMachine:cirrus-example
    cacheKeyHashIncludes:
      - .features[].id
      - .features[].collection
    cacheKeyHashExcludes: []
    inputSchema:
      type: object
    outputSchema:
      type: object
    links:
      - href: https://example.com/repo
        rel: external
        type: text/html
        title: "source repository"
      - href: https://example.com/docs
        rel: external
        type: text/html
        title: "process documentation"
